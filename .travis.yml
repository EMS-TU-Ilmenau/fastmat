language: python
sudo: required

branches:
  only:
    - master
    - stable
    - cisetup

services:
    - docker

env:
  global:
    - CIBW_BEFORE_BUILD="python -m pip install -r requirements-dev.txt"
    - CIBW_ENVIRONMENT="FASTMAT_GENERIC=1"
    - FASTMAT_GENERIC=1
    - secure: a7Ef8MN7YRctNIe/o+xeJuV6ak5gKM5V9vBPQDcO7MI5ieyNSf0TE6nLGtt8A4gfAqTM1QtZAbAGKIVB4fs2pJXjABwuDwmPR1feB6xVJGqKXhraNWLsP/CV/JIfdJcfjNxGGUn+GYEAGZQ1q6zA3JSTHuFdAVERFUKJjvcE4Wp/DPS0o75nShgpurrwn2cYzzqxB43XaOmjYVyV7mm5DbQ2D2eXtkNJ1vfIscgFEG7B+ClymEjv5XkGWeJ7xKvQCvcyBYYpi/yGAKXAEd99s/r/2T1CDSW/CsgUrWql1MF/1/93MN4bFOriG+QhbOP/zrDXdpOVnmNggtVUw7nxXzuPAZ7GSYa+OzA7zjhpWRQsHvTza86sAHm4FNyPrk3u52EDulrHCbtjc1n4ESOzYqxozi4Nyx+Ga1vVvN5OmpliHr6JoHReF7YnFAYjEGhdEW99Z7dTohqva5lmrEUvU5I3qQ+9sxCv+qXRz/TabIbFSI570KqPMHb8hTT24rpjkL2enSsg2YgMsryavOdY1jnT79lhAH9RVSPJ17Pxl4jNqkLGOJ4HQuX4c8bEsmz6sRa8eMvo3ZEfP9garKjZkraWetulC2HrbTGprtJ1BcO/cfQwxxpjUepA4a2E73b/EBSSuk6xrOsL/FVQZOZN4KtmyQN4W8gexxwgCNhRtok=

matrix:
  include:
    - name: "Linux: Python 3.9"
      os: linux
      python: '3.9'
      dist: xenial
    - name: "Linux: Python 3.8"
      os: linux
      python: '3.8'
      if: (type != pull_request) AND (branch = master)
    - name: "Linux: Python 3.7"
      os: linux
      python: '3.7'
      if: (type != pull_request) AND (branch = master)
    - name: "Linux: Python 3.6"
      os: linux
      python: '3.6'
      if: (type != pull_request) AND (branch = master)
    - name: "Linux: Python 3.5"
      os: linux
      python: '3.5'
      if: (type != pull_request) AND (branch = master)
    - name: "Linux: Python 3.4"
      os: linux
      python: '3.4'
      if: (type != pull_request) AND (branch = master)

    - name: "Linux: Python 2.7"
      os: linux
      python: '2.7'

    - name: "macOS: Python 3.7"
      os: osx
      language: shell
      python: 3.7
      cache:
        - directories:
          - $HOME/Library/Caches/pip
      env:
        - PYTHON=3.7
        - CIBW_ENVIRONMENT="FASTMAT_GENERIC=1"

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
        python --version
        which python
        mv /usr/local/bin/python /usr/local/bin/pythonxx
        cp /usr/local/bin/python3 /usr/local/bin/python
        python --version
    fi
  - python --version
  - echo "$TRAVIS_BRANCH $TRAVIS_PYTHON_VERSION $PYTHON"
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] || [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
        python -m pip install cibuildwheel==1.9 twine
    fi
  - python -m pip install six setuptools pycodestyle
  - python -m pip install coverage coveralls
  - python -m pip install -r requirements-dev.txt

script:
  - echo "Running code style checks"
  - make styleCheck
  - echo "Running build for $TRAVIS_PYTHON_VERSION"
  - |
    if [[ "$TRAVIS_BRANCH" == "master" ]] || [[ "$TRAVIS_BRANCH" == "cisetup" ]] ; then
        # master branch: regular tests and code coverage analysis
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] ; then
            make compile-coverage
            echo "Running coverage analysis..."
            coverage run --source=fastmat bee.py list makedump
            coverage run -a --source=fastmat bee.py test -v -s .class
            coverage run -a --source=fastmat bee.py test -v -s .transform
            coverage run -a --source=fastmat bee.py test -v -s .algorithm
            coverage run -a --source=fastmat bee.py calibrate Circulant
            coverage run -a --source=fastmat bee.py test -vf -s Matrix.class Circulant.class
            coverage run -a --source=fastmat bee.py benchmark maxIter=0.001 maxInit=0.01 minItems=1
        else
            make test PYTHON=python
        fi
    fi
  - |
    if [[ "$TRAVIS_BRANCH" == "stable" ]] || [[ "$TRAVIS_BRANCH" == "cisetup" ]] ; then
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] && [[ "$TRAVIS_OS_NAME" == "linux" ]] ; then
            # all version targets: build a wheel!
            echo "Generating wheels..."
            cibuildwheel --output-dir wheelhouse --platform linux --archs all
            ls -l wheelhouse/* || true
        elif [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
            # all version targets: build a wheel!
            echo "Generating wheels..."
            cibuildwheel --output-dir wheelhouse --platform macos --archs all
            ls -l wheelhouse/* || true
        fi
    fi

after_success:
  - "./.travis.yml.after_success"
