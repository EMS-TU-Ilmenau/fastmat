language: python
sudo: required

branches:
  only:
    - master
    - stable
    - cisetup

services:
    - docker

env:
  global:
    - CIBW_BEFORE_BUILD="python -m pip install -r requirements-dev.txt"
    - CIBW_ENVIRONMENT="FASTMAT_GENERIC=1"
    - FASTMAT_GENERIC=1
    - secure: ieBbXDsJLiFdiZCU0jQ+2LQg2lGzcFRKpcynFj41a5q8+WoSkDk5YHDgjf8tX1+b0HBEPwyxIXcWiHCSxrZ0AgDVjCvTW4bTRCSG3QuK7u+fowhQWvK6qe3SKgXw9CZ6yycqle63zIKiQFnvKNTn1CneKCKzqVrb08i7MpQdBX0t7bUqUi45dS9PAEaWAUKhyrtXYKJbkyBan36joJjccShiqYMh7OhlLsCPcUnY9Cb76D9O4JrxHikKn/y59ZEpm/eO3xJNIkl/Rooak8b16gy6CuoIPgXte0LQrgxGmD5KsJcCGLW/cJOmH4965h3LdVpuF3hkC1w+jTpsihpLyWL+4ZFqFyN7P68Pv8MFcn2GmCSopHw09UWErTW/O+ofzgb0afK/MT/5av1zJjXEWq34YR+AeHn1wGRFHbkOnpPughcimpqgtiAMDvzzI2/tbb7jxD4K6pGamqvYSoIIsRnxQQnfNGT+UcnyHCrTv1ZMhUlJ32jY7fS4jlpsyxZYLcAFyW7noMqmkkMZby755NIiwAz5W81dk8XQeSsYjFpEHlT1K/9POUgWPW9Pbw0k7EuaBxmWxBJ3kYhWg1DFNc2jJpedmecnhAGwWv2M1uBguLBDaZ1VEisw0w8Ll3KcucQmaiZsCKY7Bzp6taN54ZGsBRJgQd73QTKsVDASq7k=

matrix:
  include:
    - name: "Linux: Python 3.9"
      os: linux
      python: '3.9'
      dist: xenial
    - name: "Linux: Python 3.8"
      if: (type != pull_request) AND (branch = master)
      os: linux
      python: '3.8'
    - name: "Linux: Python 3.7"
      if: (type != pull_request) AND (branch = master)
      os: linux
      python: '3.7'
    - name: "Linux: Python 3.6"
      if: (type != pull_request) AND (branch = master)
      os: linux
      python: '3.6'
    - name: "Linux: Python 3.5"
      if: (type != pull_request) AND (branch = master)
      os: linux
      python: '3.5'
    - name: "Linux: Python 3.4"
      if: (type != pull_request) AND (branch = master)
      os: linux
      python: '3.4'

    - name: "Linux: Python 2.7"
      os: linux
      python: '2.7'

    - name: "macOS: Python 3.7"
      os: osx
      language: shell
      python: 3.7
      cache:
        - directories:
          - $HOME/Library/Caches/pip
      env:
        - PYTHON=3.7
        - CIBW_ENVIRONMENT="FASTMAT_GENERIC=1"

    - &linux_arm64_36
      name: Linux | arm64 | Python 3.6
      if: (type != pull_request) AND (branch != master)
      language: python
      python: 3.6
      services: docker
      arch: arm64
      env: PYTHON=python

    - &linux_ppc64le_36
      name: Linux | ppc64le | Python 3.6
      if: (type != pull_request) AND (branch != master)
      language: python
      python: 3.6
      services: docker
      sudo: true
      arch: ppc64le
      env: PYTHON=python

    - &linux_s390x_36
      if: (type != pull_request) AND (branch != master)
      name: Linux | s390x | Python 3.6
      language: python
      python: 3.6
      services: docker
      sudo: true
      arch: s390x
      env: PYTHON=python

  allow_failures:
    - *linux_arm64_36
    # must repeat the s390x job above exactly to match
    - *linux_s390x_36
    # Power PC commented out due to missing BLAS (need to fiddle out how to link the build against one)
    - *linux_ppc64le_36

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
        python --version
        which python
        python -m pip install cibuildwheel twine
        mv /usr/local/bin/python /usr/local/bin/pythonxx
        cp /usr/local/bin/python3 /usr/local/bin/python
        python --version
    fi
  - python --version
  - echo "$TRAVIS_BRANCH $TRAVIS_PYTHON_VERSION $PYTHON"
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] || [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
        python -m pip install cibuildwheel==1.9 twine
    elif [[ "$TRAVIS_PYTHON_VERSION" == "3.6" ]] ; then
        python -m pip install cibuildwheel twine
    fi
  - python -m pip install six setuptools pycodestyle
  - python -m pip install coverage coveralls
  - python -m pip install -r requirements-dev.txt

script:
  - echo "Running code style checks"
  - make styleCheck
  - echo "Running build for $TRAVIS_PYTHON_VERSION"
  - |
    if [[ "$TRAVIS_BRANCH" == "master" ]] || [[ "$TRAVIS_BRANCH" == "cisetup" ]] ; then
        # master branch: regular tests and code coverage analysis
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] ; then
            make compile-coverage
            echo "Running coverage analysis..."
            coverage run --source=fastmat bee.py list makedump
            coverage run -a --source=fastmat bee.py test -v -s .class
            coverage run -a --source=fastmat bee.py test -v -s .transform
            coverage run -a --source=fastmat bee.py test -v -s .algorithm
            coverage run -a --source=fastmat bee.py calibrate Circulant
            coverage run -a --source=fastmat bee.py test -vf -s Matrix.class Circulant.class
            coverage run -a --source=fastmat bee.py benchmark maxIter=0.001 maxInit=0.01 minItems=1
        else
            make test PYTHON=python
        fi
    fi
  - |
    if [[ "$TRAVIS_BRANCH" == "stable" ]] || [[ "$TRAVIS_BRANCH" == "cisetup" ]] ; then
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.9" ]] && [[ "$TRAVIS_OS_NAME" == "linux" ]] ; then
            # all version targets: build wheels for Linux
            echo "Generating wheels..."
            cibuildwheel --output-dir wheelhouse --platform linux --archs all
            ls -l wheelhouse/* || true
        elif [[ "$TRAVIS_OS_NAME" == "osx" ]] ; then
            # all version targets: build wheels for macOS
            echo "Generating wheels..."
            cibuildwheel --output-dir wheelhouse --platform macos --archs all
            ls -l wheelhouse/* || true
        elif [[ "$TRAVIS_PYTHON_VERSION" == "3.6" ]] ; then
            # all version targets: build wheels for other architectures
            echo "Generating wheels..."
            cibuildwheel --output-dir wheelhouse --archs all
            ls -l wheelhouse/* || true
        fi
    fi

after_success:
  - "./.travis.yml.after_success"
